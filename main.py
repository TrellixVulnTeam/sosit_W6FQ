import telebot
import constants
import user_com
import datetime
import random
import time
bot = telebot.TeleBot(constants.token)

QIWI_text = '''–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å QIWI. 
–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, –∏, –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å –¥–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥—É—Ç—Å—è –≤ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É
–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π id –∏ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞
–í–∞—à id - %s
–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ #%s'''

Yandex_text = '''–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ø–î. 
–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, –∏, –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å –¥–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥—É—Ç—Å—è –≤ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É
–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π id –∏ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞
–í–∞—à id - %s
–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ #%s'''

btc_text = '''–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è BTC —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∏–∂–µ.
(—Å—É–º–º–∞ –Ω–µ –º–µ–Ω–µ–µ 0,001 BTC).'''


@bot.message_handler(commands= ['start'])
def start(message):
    s = user_com.o_clock()
    if s != []:
        for i in s:
            info = user_com.info(i)
            try:
                money = user_com.parse(i)
            except:
                break
            if info[8] == 'less':
                if float(money) < float(info[7]):
                    user_com.add_plus(info[0], info[6]*1.8)
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞')
                else:
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞')
            else:
                if money > info[7]:
                    user_com.add_plus(info[0], info[6]*1.8)
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞')
                else:
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞')
            user_com.null(info[0])

    if str(message.text)[:6] == '/start':
        try:
            link_name = str(message.text)[7:]
            print(link_name)
        except:
            link_name = ''
        hello = user_com.registration(message.from_user.id, message.from_user.first_name, str(message.from_user.id), link_name)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'ü§ù–ü–∞—Ä–∏')
        user_markup.row('üí∏–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üíº–ú–æ–π –±–∞–ª–∞–Ω—Å')
        user_markup.row('üî•–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
        sent = bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç!' + hello, reply_markup= user_markup)
        bot.register_next_step_handler(sent, introduction)



def introduction(message):
    if message.text == 'üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('Bitcoin- btc', 'Etherium - eth')
        user_markup.row('QIWI - rub', 'Yd - rub')
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è‚¨áÔ∏è', reply_markup= user_markup)
        bot.register_next_step_handler(sent, payment)

    elif message.text == 'üíº–ú–æ–π –±–∞–ª–∞–Ω—Å':
        bot.send_message(message.from_user.id, '–í–∞—à –±–∞–ª–∞–Ω—Å ' + str(user_com.info(message.from_user.id)[2]) + ' –í–¢–°')
        message.text = '/start'
        start(message)

    elif message.text == 'üî•–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', '–†–µ—Ñ–µ—Ä–∞–ª—ã')
        user_markup.row('FAQ')
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup=user_markup)
        bot.register_next_step_handler(sent, alse)

    elif message.text == 'ü§ù–ü–∞—Ä–∏':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('BTC/USD')
        user_markup.row('ETH/USD')
        user_markup.row('XRP/USD')
        user_markup.row('BCC/USD')
        user_markup.row('EOS/USD')
        user_markup.row('LTC/USD')
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup= user_markup)
        bot.register_next_step_handler(sent, Bitcoin_def)

    else:
        bot.send_message(message.from_user.id, '"'+message.text+'", —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        message.text = '/start'
        start(message)


def Bitcoin_def(message):
    if message.text == 'BTC/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('BTC')
        constants.valume = 'BTC'
        user_markup.row('1 –ß–∞—Å')
        user_markup.row('2 –ß–∞—Å–∞')
        user_markup.row('4 –ß–∞—Å–∞')
        user_markup.row('6 –ß–∞—Å–æ–≤')
        user_markup.row('12 –ß–∞—Å–æ–≤')
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å: ' + str(money) + '$ –∑–∞ BTS. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞',reply_markup=user_markup)
        bot.register_next_step_handler(sent, time_case)
    elif message.text == 'ETH/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('ETH')
        constants.valume = 'ETH'
        user_markup.row('1 –ß–∞—Å')
        user_markup.row('2 –ß–∞—Å–∞')
        user_markup.row('4 –ß–∞—Å–∞')
        user_markup.row('6 –ß–∞—Å–æ–≤')
        user_markup.row('12 –ß–∞—Å–æ–≤')
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å: ' + str(money) + '$ –∑–∞ ETH. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞',reply_markup=user_markup)
        bot.register_next_step_handler(sent, time_case)
    elif message.text == 'XRP/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('XRP')
        constants.valume = 'XRP'
        user_markup.row('1 –ß–∞—Å')
        user_markup.row('2 –ß–∞—Å–∞')
        user_markup.row('4 –ß–∞—Å–∞')
        user_markup.row('6 –ß–∞—Å–æ–≤')
        user_markup.row('12 –ß–∞—Å–æ–≤')
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å: ' + str(money) + '$ –∑–∞ XRP. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞',reply_markup=user_markup)
        bot.register_next_step_handler(sent, time_case)
    elif message.text == 'EOS/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('EOS')
        constants.valume = 'EOS'
        user_markup.row('1 –ß–∞—Å')
        user_markup.row('2 –ß–∞—Å–∞')
        user_markup.row('4 –ß–∞—Å–∞')
        user_markup.row('6 –ß–∞—Å–æ–≤')
        user_markup.row('12 –ß–∞—Å–æ–≤')
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å: ' + str(money) + '$ –∑–∞ EOS. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞',reply_markup=user_markup)
        bot.register_next_step_handler(sent, time_case)
    elif message.text == 'LTC/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('LTC')
        constants.valume = 'LTC'
        user_markup.row('1 –ß–∞—Å')
        user_markup.row('2 –ß–∞—Å–∞')
        user_markup.row('4 –ß–∞—Å–∞')
        user_markup.row('6 –ß–∞—Å–æ–≤')
        user_markup.row('12 –ß–∞—Å–æ–≤')
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å: ' + str(money) + '$ –∑–∞ LTC. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞',reply_markup=user_markup)
        bot.register_next_step_handler(sent, time_case)
    elif message.text == '–ù–∞–∑–∞–¥':
        message.text = '/start'
        start(message)
    else:
        message.text = '/start'
        start(message)




def payment(message):
    if message.text == 'Bitcoin- btc':
        bot.send_message(message.from_user.id, btc_text + '\n' + str(random.choice(constants.btc_list)) )
        message.text = 'start'
        start(message)
    elif message.text == 'Etherium - eth':
        bot.send_message(message.from_user.id, btc_text + '\n' + str(random.choice(constants.eth_list)))
        message.text = '/start'
        start(message)
    elif message.text == '–ù–∞–∑–∞–¥':
        message.text = '/start'
        start(message)
    else:
        message.text = '/start'
        start(message)


def end_pay(message):
    if message.text == '–ù–∞–∑–∞–¥':
        message.text = '/start'
        start(message)
    else:
        message.text = '/start'
        start(message)





def time_case(message):
    if message.text == '1 –ß–∞—Å':
        user_com.set_alarm(1, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–∏—Ç–µ?', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    elif message.text == '2 –ß–∞—Å–∞':
        user_com.set_alarm(2, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–∏—Ç–µ?', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    elif message.text == '4 –ß–∞—Å–∞':
        user_com.set_alarm(4, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–∏—Ç–µ?', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    elif message.text == '6 –ß–∞—Å–æ–≤':
        user_com.set_alarm(6, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–∏—Ç–µ?', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    elif message.text == '12 –ß–∞—Å–æ–≤':
        user_com.set_alarm(12, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–∏—Ç–µ?', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    else:
        message.text = '/start'
        start(message)

def pay(message):
    if message.text == '–ù–∞–∑–∞–¥':
        message.text = '/start'
        start(message)
    else:
        try:
            q = float(message.text)
            print(q)
            if  q <= user_com.info(message.from_user.id)[2]:
                user_com.add_plus(message.from_user.id, -q)
                user_com.pay(message.from_user.id, q)
                user_markup = telebot.types.ReplyKeyboardMarkup(True)
                user_markup.row('–ë–æ–ª—å—à–µ', '–ú–µ–Ω—å—à–µ')
                sent = bot.send_message(message.from_user.id, '–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞' , reply_markup=user_markup)
                bot.register_next_step_handler(sent, pay_l)
            else:
                bot.send_message(message.from_user.id, '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
                message.text = '/start'
                start(message)
        except:
            bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..')
            message.text = '/start'
            start(message)

def pay_l(message):
    if message.text == '–ë–æ–ª—å—à–µ':
        money = float(user_com.parse(constants.valume))
        write = user_com.more_less(message.from_user.id, 'more', money, constants.valume)
        bot.send_message(message.from_user.id, '–ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –±—É–¥–µ—Ç –≤ '+ str(write[0]))
    elif message.text == '–ú–µ–Ω—å—à–µ':
        money = float(user_com.parse(constants.valume))
        write = user_com.more_less(message.from_user.id, 'less', money, constants.valume)
        bot.send_message(message.from_user.id, '–ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –±—É–¥–µ—Ç –≤ ' + str(write[0]))
    message.text = '/start'
    start(message)


def alse(message):
    if message.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        sent  = bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.')
        bot.register_next_step_handler(sent, question)
    elif message.text == '–†–µ—Ñ–µ—Ä–∞–ª—ã':
        info = user_com.info(message.from_user.id)
        bot.send_message(message.from_user.id, '–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, –≤–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 0,0005 BTC \n –≠—Ç–æ –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: http://t.me/testbitcoinkifirbot?start=' + str(info[3]) + ' . \n –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ' + str(info[5]))
        message.text = '/start'
        start(message)
    else:
        bot.send_message(message.from_user.id, '"' + message.text + '", —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        message.text = '/start'
        start(message)



def question(mesaage):
    bot.send_message(constants.admin, mesaage.text + ' id:' + str(mesaage.from_user.id) + ' –ò–º—è:' + str(mesaage.from_user.first_name))
    bot.send_message(mesaage.from_user.id, '–°–ø–∞—Å–∏–±–æ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ –í–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É')
    mesaage.text = '/start'
    start(mesaage)



def admin_in(message):
    if message.text == '–ó–∞–∫–∏–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏':
        sent = bot.send_message(message.from_user.id, '–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∏–Ω—É—Ç—å? –∏ –∫–∞–∫–æ–π id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')
        bot.register_next_step_handler(sent, admin_add)
    elif message.text == '–ü—Ä–∏–±–∞–≤—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É':
        sent = bot.send_message(message.from_user.id, '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞? –∏ –∫–∞–∫–æ–π id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')
        bot.register_next_step_handler(sent, admin_add_plus)
    elif message.text == '–ü—Ä–∏–±–∞–≤—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É':
        message.text = '/start'
        start(message)
    else:
        bot.send_message(message.from_user.id, '"' + message.text + '", —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        message.text = '/start'
        start(message)

def admin_add(message):
    try:
        text = message.text.split()
        user_com.add(text[1], text[0])
        bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, –¥–µ–Ω—å–≥–∏ –≤ –∏–≥—Ä–µ')
        message.text = '/start'
        start(message)
    except:
        bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        message.text = '/start'
        start(message)

def admin_add_plus(message):
    try:
        text = message.text.split()
        user_com.add_plus(int(text[1]), int(text[0]))
        bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, –¥–µ–Ω—å–≥–∏ –≤ –∏–≥—Ä–µ')
        message.text = '/start'
        start(message)
    except:
        bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        message.text = '/start'
        start(message)

print(datetime.datetime.today().time().hour)

bot.polling(none_stop=True)
